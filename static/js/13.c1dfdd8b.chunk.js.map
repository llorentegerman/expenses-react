{"version":3,"sources":["pages/sheets/SettingsSheetComponent.js"],"names":["styles","StyleSheet","create","container","margin","maxWidth","errorText","color","width","label","fontWeight","marginRight","title","lineHeight","fontSize","marginBottom","SettingsComponent","useReactRouter","history","match","useExpenses","user","refreshUser","useState","loading","setLoading","useForm","errors","handleSubmit","register","reset","useAsync","promiseFn","firebaseClient","getSheetName","sheetId","params","sheetName","data","loadingSheetName","isPending","useEffect","window","scrollTo","name","fieldName","onSave","a","setSheetName","userId","uid","push","fullScreen","className","css","placeholder","ref","required","message","flexGrow","style","marginTop","horizontal","onClick"],"mappings":"kQAcMA,EAASC,IAAWC,OAAO,CAC7BC,UAAW,CACPC,OAAQ,SACRC,SAAU,KAEdC,UAAW,CACPC,MAAO,MACPC,MAAO,OAEXC,MAAO,CACHC,WAAY,IACZC,YAAa,GAEjBC,MAAO,CACHC,WAAY,OACZC,SAAU,GACVJ,WAAY,OACZK,aAAc,MAgFPC,UA5Ef,WAA8B,IAAD,EACEC,MAAnBC,EADiB,EACjBA,QAASC,EADQ,EACRA,MADQ,EAEKC,cAAtBC,EAFiB,EAEjBA,KAAMC,EAFW,EAEXA,YAFW,EAIKC,oBAAS,GAJd,mBAIlBC,EAJkB,KAITC,EAJS,OAMyBC,cAA1CC,EANiB,EAMjBA,OAAQC,EANS,EAMTA,aAAcC,EANL,EAMKA,SAAUC,EANf,EAMeA,MANf,EAQgCC,YAAS,CAC9DC,UAAWC,IAAeC,aAC1BC,QAAShB,EAAMiB,OAAOD,UAFZE,EARW,EAQjBC,KAA4BC,EARX,EAQAC,UAKzBC,qBAAU,kBAAMC,OAAOC,SAAS,EAAG,KAAI,IAEvCF,qBAAU,WACFJ,GAAahB,GACbS,EAAM,CACFc,KAAMP,MAIf,CAACA,EAAWhB,IAEf,IAeoBwB,EAfdC,EAAM,uCAAG,6BAAAC,EAAA,6DAASH,EAAT,EAASA,KACpBnB,GAAW,GADA,SAGLQ,IAAee,aAAa,CAC9BC,OAAQ5B,EAAK6B,IACbf,QAAShB,EAAMiB,OAAOD,QACtBE,UAAWO,IANJ,uBAQLtB,IARK,OASXQ,IACAZ,EAAQiC,KAAR,iBAAuBhC,EAAMiB,OAAOD,UAVzB,2CAAH,sDAsBZ,OACI,kBAAC,IAAD,CAAkBX,QAASe,GAAoBf,EAAS4B,YAAU,GAC9D,kBAAC,SAAD,CAAQC,UAAWC,YAAItD,EAAOG,YAC1B,0BAAMkD,UAAWC,YAAItD,EAAOY,QAA5B,YAEA,0BAAMyC,UAAWC,YAAItD,EAAOS,QAA5B,QACA,kBAAC,IAAD,CACImC,KAAK,OACLW,YAAY,aACZC,IAAK3B,EAAS,CAAE4B,UAAU,MAftC9B,EADgBkB,EAkBK,SAhBjB,0BAAMQ,UAAWC,YAAItD,EAAOM,YACvBqB,EAAOkB,GAAWa,SAAW,kBAiB9B,kBAAC,MAAD,CAAKC,SAAU,EAAGC,MAAO,CAAEC,UAAW,IAAMC,WAAW,UACnD,kBAAC,IAAD,CACIvD,MAAM,MACNE,MAAM,SACNsD,QA1BJ,kBAAM7C,EAAQiC,KAAR,iBAAuBhC,EAAMiB,OAAOD,aA4B1C,kBAAC,IAAD,CACI5B,MAAM,QACNE,MAAM,OACNsD,QAASnC,EAAakB","file":"static/js/13.c1dfdd8b.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { StyleSheet, css } from 'aphrodite';\nimport useReactRouter from 'use-react-router';\nimport { useAsync } from 'react-async';\nimport useForm from 'react-hook-form';\nimport { Column, Row } from 'simple-flexbox';\nimport { useExpenses } from '../../logic/useExpenses';\nimport firebaseClient from '../../logic/firebaseClient';\nimport {\n    ButtonComponent,\n    InputComponent,\n    LoadingComponent\n} from '../../components';\n\nconst styles = StyleSheet.create({\n    container: {\n        margin: '0 auto',\n        maxWidth: 500\n    },\n    errorText: {\n        color: 'red',\n        width: '95%'\n    },\n    label: {\n        fontWeight: 500,\n        marginRight: 6\n    },\n    title: {\n        lineHeight: '36px',\n        fontSize: 24,\n        fontWeight: 'bold',\n        marginBottom: 10\n    }\n});\n\nfunction SettingsComponent() {\n    const { history, match } = useReactRouter();\n    const { user, refreshUser } = useExpenses();\n\n    const [loading, setLoading] = useState(false);\n\n    const { errors, handleSubmit, register, reset } = useForm();\n\n    const { data: sheetName, isPending: loadingSheetName } = useAsync({\n        promiseFn: firebaseClient.getSheetName,\n        sheetId: match.params.sheetId\n    });\n\n    useEffect(() => window.scrollTo(0, 0), []);\n\n    useEffect(() => {\n        if (sheetName && user) {\n            reset({\n                name: sheetName\n            });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [sheetName, user]);\n\n    const onSave = async ({ name }) => {\n        setLoading(true);\n\n        await firebaseClient.setSheetName({\n            userId: user.uid,\n            sheetId: match.params.sheetId,\n            sheetName: name\n        });\n        await refreshUser();\n        reset();\n        history.push(`/sheet/${match.params.sheetId}`);\n    };\n\n    const onClose = () => history.push(`/sheet/${match.params.sheetId}`);\n\n    const renderError = fieldName =>\n        errors[fieldName] && (\n            <span className={css(styles.errorText)}>\n                {errors[fieldName].message || 'Required field'}\n            </span>\n        );\n\n    return (\n        <LoadingComponent loading={loadingSheetName || loading} fullScreen>\n            <Column className={css(styles.container)}>\n                <span className={css(styles.title)}>Settings</span>\n\n                <span className={css(styles.label)}>Name</span>\n                <InputComponent\n                    name=\"name\"\n                    placeholder=\"SHEET NAME\"\n                    ref={register({ required: true })}\n                />\n                {renderError('name')}\n\n                <Row flexGrow={1} style={{ marginTop: 20 }} horizontal=\"spaced\">\n                    <ButtonComponent\n                        color=\"red\"\n                        label=\"Cancel\"\n                        onClick={onClose}\n                    />\n                    <ButtonComponent\n                        color=\"green\"\n                        label=\"Save\"\n                        onClick={handleSubmit(onSave)}\n                    />\n                </Row>\n            </Column>\n        </LoadingComponent>\n    );\n}\n\nexport default SettingsComponent;\n"],"sourceRoot":""}