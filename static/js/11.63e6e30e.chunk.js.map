{"version":3,"sources":["pages/expenses/UpsertExpenseComponent.js"],"names":["styles","StyleSheet","create","errorText","color","width","AddExpenseComponent","useExpenses","getFile","initializing","useReactRouter","history","match","editMode","path","useForm","defaultValues","errors","handleSubmit","register","reset","setValue","watch","useAsync","promiseFn","firebaseClient","getExpenseById","sheetId","params","expenseId","expense","data","loadingExpense","isPending","getMetadata","metadata","loadingMetadata","useState","defaultExpense","setDefaultExpense","loadingUpsert","setLoadingUpsert","files","setFiles","filesChanged","setFilesChanged","useEffect","window","scrollTo","loadFiles","filteredExpense","a","newFiles","expenseFiles","i","length","url","publicUrl","isFileAnImage","push","name","thumb","thumbFilename","substring","lastIndexOf","thumbFolder","newDefault","date","Date","defaultCity","Object","keys","cities","find","c","default","defaultCategory","categories","defaultCurrency","currencies","defaultMethod","methods","city","category","currency","method","mapMetadataKeysToArray","tagsSuggestions","extractTagsFromMetadata","tags","loading","fullScreen","onSave","newData","getTime","dateNeg","id","upsertExpense","item","renderError","fieldName","className","css","message","tagsValues","undefined","split","filter","e","map","v","style","padding","marginTop","horizontal","maxWidth","selected","onChange","value","ref","required","type","_","newValue","placeholder","values","target","autoComplete","onAddition","tag","newTags","slice","join","onDelete","splice","suggestions","validate","isNaN","Number","hasFiles","flexGrow","label","onClick"],"mappings":"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","file":"static/js/11.63e6e30e.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { StyleSheet, css } from 'aphrodite';\nimport useReactRouter from 'use-react-router';\nimport { Column, Row } from 'simple-flexbox';\nimport useForm from 'react-hook-form';\nimport { useAsync } from 'react-async';\nimport { useExpenses } from '../../logic/useExpenses';\nimport firebaseClient from '../../logic/firebaseClient';\nimport {\n    AutosuggestCustom,\n    ButtonComponent,\n    DatePickerComponent,\n    ImageUploadComponent,\n    InputComponent,\n    LoadingComponent,\n    TagsComponent\n} from '../../components';\nimport {\n    extractTagsFromMetadata,\n    isFileAnImage,\n    mapMetadataKeysToArray\n} from '../../logic/utilities';\n\nconst styles = StyleSheet.create({\n    errorText: {\n        color: 'red',\n        width: '95%'\n    }\n});\n\nfunction AddExpenseComponent() {\n    const { getFile, initializing } = useExpenses();\n    const { history, match } = useReactRouter();\n    const editMode = match.path === '/sheet/:sheetId/edit/:expenseId';\n\n    const { errors, handleSubmit, register, reset, setValue, watch } = useForm({\n        defaultValues: {}\n    });\n\n    const { data: expense, isPending: loadingExpense } = useAsync({\n        promiseFn: firebaseClient.getExpenseById,\n        sheetId: match.params.sheetId,\n        expenseId: match.params.expenseId\n    });\n\n    const { data: metadata, isPending: loadingMetadata } = useAsync({\n        promiseFn: firebaseClient.getMetadata,\n        sheetId: match.params.sheetId\n    });\n\n    const [defaultExpense, setDefaultExpense] = useState();\n    const [loadingUpsert, setLoadingUpsert] = useState(false);\n\n    const [files, setFiles] = useState([]);\n    const [filesChanged, setFilesChanged] = useState(0);\n\n    useEffect(() => window.scrollTo(0, 0), []);\n\n    useEffect(() => {\n        const loadFiles = async filteredExpense => {\n            const newFiles = [];\n            const expenseFiles = filteredExpense.files || [];\n            for (let i = 0; i < expenseFiles.length; i++) {\n                let url = expenseFiles[i].url;\n                let publicUrl = url;\n                try {\n                    publicUrl = await firebaseClient.getFile(\n                        expenseFiles[i].url\n                    );\n                } catch (e) {}\n\n                if (!isFileAnImage(expenseFiles[i])) {\n                    newFiles.push({\n                        url,\n                        name: expenseFiles[i].name,\n                        publicUrl,\n                        thumb: ''\n                    });\n                    continue;\n                }\n\n                const thumbFilename = `thumb_${expenseFiles[i].url.substring(\n                    expenseFiles[i].url.lastIndexOf('/') + 1\n                )}`;\n                const thumbFolder = `${expenseFiles[i].url.substring(\n                    0,\n                    expenseFiles[i].url.lastIndexOf('/') + 1\n                )}`;\n                let thumb = `${thumbFolder}${thumbFilename}`;\n                try {\n                    thumb = await firebaseClient.getFile(\n                        `${thumbFolder}${thumbFilename}`\n                    );\n                } catch (e) {}\n                newFiles.push({\n                    url,\n                    name: expenseFiles[i].name,\n                    publicUrl,\n                    thumb\n                });\n            }\n            setFiles(newFiles);\n        };\n\n        if (!initializing && !loadingExpense && !defaultExpense && metadata) {\n            if (editMode) {\n                if (!expense) {\n                    const newDefault = { date: new Date() };\n                    setDefaultExpense(newDefault);\n                    reset(newDefault);\n                } else {\n                    const newDefault = {\n                        ...expense,\n                        date: new Date(+expense.date)\n                    };\n                    setDefaultExpense(newDefault);\n                    reset(newDefault);\n                    loadFiles(expense);\n                }\n            } else {\n                const cities = Object.keys(metadata.cities || {});\n                const defaultCity = cities.find(\n                    c => metadata.cities[c].default\n                );\n\n                const categories = Object.keys(metadata.categories || {});\n                const defaultCategory = categories.find(\n                    c => metadata.categories[c].default\n                );\n\n                const currencies = Object.keys(metadata.currencies || {});\n                const defaultCurrency = currencies.find(\n                    c => metadata.currencies[c].default\n                );\n\n                const methods = Object.keys(metadata.methods || {});\n                const defaultMethod = methods.find(\n                    c => metadata.methods[c].default\n                );\n\n                const newDefault = {\n                    date: new Date(),\n                    city: defaultCity,\n                    category: defaultCategory,\n                    currency: defaultCurrency,\n                    method: defaultMethod\n                };\n                setDefaultExpense(newDefault);\n                reset(newDefault);\n            }\n        }\n    }, [\n        editMode,\n        match.params.expenseId,\n        initializing,\n        loadingExpense,\n        getFile,\n        expense,\n        metadata,\n        defaultExpense,\n        reset\n    ]);\n\n    const cities = mapMetadataKeysToArray(metadata, 'cities');\n    const categories = mapMetadataKeysToArray(metadata, 'categories');\n    const currencies = mapMetadataKeysToArray(metadata, 'currencies');\n    const methods = mapMetadataKeysToArray(metadata, 'methods');\n    const { tags: tagsSuggestions } = extractTagsFromMetadata(metadata);\n\n    if (!metadata) {\n        return (\n            <LoadingComponent\n                loading={loadingExpense || loadingUpsert || loadingMetadata}\n                fullScreen\n            >\n                <div></div>\n            </LoadingComponent>\n        );\n    }\n\n    const onSave = async ({ date, ...data }) => {\n        const newData = {\n            date: new Date(date).getTime(),\n            ...data\n        };\n        newData.dateNeg = -newData.date;\n        if (editMode) {\n            newData.id = match.params.expenseId;\n        }\n        newData.files = files;\n        setLoadingUpsert(true);\n        await firebaseClient.upsertExpense({\n            sheetId: match.params.sheetId,\n            item: newData,\n            metadata\n        });\n        reset();\n        history.push(`/sheet/${match.params.sheetId}`);\n    };\n\n    const onClose = () => history.push(`/sheet/${match.params.sheetId}`);\n\n    const renderError = fieldName =>\n        errors[fieldName] && (\n            <span className={css(styles.errorText)}>\n                {errors[fieldName].message || 'Required field'}\n            </span>\n        );\n\n    const tagsValues = (\n        (watch('tags') !== undefined\n            ? watch('tags')\n            : defaultExpense\n            ? defaultExpense.tags\n            : '') || ''\n    )\n        .split(',')\n        .filter(e => !!e)\n        .map(v => ({ id: v, name: v }));\n\n    return (\n        <LoadingComponent\n            loading={loadingExpense || loadingUpsert || loadingMetadata}\n            fullScreen\n        >\n            <Column style={{ padding: 25, marginTop: 5 }} horizontal=\"center\">\n                <Column style={{ width: '100%', maxWidth: 500 }}>\n                    <h1>{editMode ? 'Edit Expense' : 'Add Expense'}</h1>\n                    <DatePickerComponent\n                        name=\"date\"\n                        selected={\n                            watch('date')\n                                ? new Date(watch('date'))\n                                : (defaultExpense || {}).date\n                                ? new Date((defaultExpense || {}).date)\n                                : new Date()\n                        }\n                        onChange={date => setValue('date', date)}\n                        value={watch('date')}\n                    />\n                    <input\n                        name=\"date\"\n                        ref={register({ required: true })}\n                        type=\"hidden\"\n                    />\n                    {renderError('date')}\n\n                    <AutosuggestCustom\n                        onChange={(_, { newValue }) =>\n                            setValue('city', newValue)\n                        }\n                        placeholder=\"CITY\"\n                        value={watch('city', (defaultExpense || {}).city || '')}\n                        values={cities}\n                    />\n                    <input\n                        name=\"city\"\n                        ref={register({ required: true })}\n                        type=\"hidden\"\n                    />\n                    {renderError('city')}\n\n                    <AutosuggestCustom\n                        onChange={(_, { newValue }) =>\n                            setValue('category', newValue)\n                        }\n                        placeholder=\"CATEGORY\"\n                        value={watch(\n                            'category',\n                            (defaultExpense || {}).category || ''\n                        )}\n                        values={categories}\n                    />\n                    <input\n                        name=\"category\"\n                        ref={register({ required: true })}\n                        type=\"hidden\"\n                    />\n                    {renderError('category')}\n\n                    <InputComponent\n                        name=\"description\"\n                        placeholder=\"DESCRIPTION\"\n                        onChange={e => setValue('description', e.target.value)}\n                        ref={register({ required: true })}\n                        autoComplete=\"off\"\n                    />\n                    {renderError('description')}\n\n                    <TagsComponent\n                        onAddition={tag => {\n                            const newTags = tagsValues.slice(0);\n                            if (newTags.find(i => i.name === tag.name)) {\n                                return;\n                            }\n                            newTags.push(tag);\n                            setValue(\n                                'tags',\n                                newTags.map(e => e.name).join(',')\n                            );\n                        }}\n                        onDelete={i => {\n                            const newTags = tagsValues.slice(0);\n                            newTags.splice(i, 1);\n                            setValue(\n                                'tags',\n                                newTags.map(e => e.name).join(',')\n                            );\n                        }}\n                        suggestions={tagsSuggestions}\n                        tags={tagsValues}\n                    />\n                    <input name=\"tags\" ref={register({})} type=\"hidden\" />\n                    {renderError('tags')}\n\n                    <InputComponent\n                        type=\"number\"\n                        name=\"amount\"\n                        placeholder=\"AMOUNT\"\n                        onChange={e => setValue('amount', e.target.value)}\n                        ref={register({\n                            required: true,\n                            validate: value =>\n                                !isNaN(Number(value)) ||\n                                'Debe ingresar un numero'\n                        })}\n                        autoComplete=\"off\"\n                    />\n                    {renderError('amount')}\n\n                    <AutosuggestCustom\n                        onChange={(_, { newValue }) =>\n                            setValue('currency', newValue)\n                        }\n                        placeholder=\"CURRENCY\"\n                        value={watch(\n                            'currency',\n                            (defaultExpense || {}).currency || ''\n                        )}\n                        values={currencies}\n                    />\n                    <input\n                        name=\"currency\"\n                        ref={register({ required: true })}\n                        type=\"hidden\"\n                    />\n                    {renderError('currency')}\n\n                    <AutosuggestCustom\n                        onChange={(_, { newValue }) =>\n                            setValue('method', newValue)\n                        }\n                        placeholder=\"Method\"\n                        value={watch(\n                            'method',\n                            (defaultExpense || {}).method || ''\n                        )}\n                        values={methods}\n                    />\n                    <input\n                        name=\"method\"\n                        ref={register({ required: true })}\n                        type=\"hidden\"\n                    />\n                    {renderError('method')}\n\n                    {(!editMode || (editMode && expense)) && (\n                        <ImageUploadComponent\n                            onChange={newFiles => {\n                                setFilesChanged(filesChanged + 1);\n                                return setFiles(newFiles);\n                            }}\n                            files={files}\n                            filesChanged={filesChanged}\n                            hasFiles={\n                                !editMode\n                                    ? false\n                                    : (expense.files || []).length > 0\n                            }\n                        />\n                    )}\n                    <Row\n                        flexGrow={1}\n                        style={{ marginTop: 20 }}\n                        horizontal=\"spaced\"\n                    >\n                        <ButtonComponent\n                            color=\"red\"\n                            label=\"Cancel\"\n                            onClick={onClose}\n                        />\n                        <ButtonComponent\n                            color=\"green\"\n                            label={editMode ? 'Save' : 'Add Expense'}\n                            onClick={handleSubmit(onSave)}\n                        />\n                    </Row>\n                </Column>\n            </Column>\n        </LoadingComponent>\n    );\n}\n\nexport default AddExpenseComponent;\n"],"sourceRoot":""}